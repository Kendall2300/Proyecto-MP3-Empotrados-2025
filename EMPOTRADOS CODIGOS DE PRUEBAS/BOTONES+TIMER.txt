#include "sys/alt_stdio.h"
#include "sys/alt_irq.h"
#include "altera_avalon_pio_regs.h"
#include <unistd.h>

#define HEX_DISPLAY_BASE 0x4840
#define BUTTON_BASE 0x4820
#define BUTTON_IRQ 2  // IRQ ID para los botones (ajusta según tu configuración)

volatile int pause_pressed = 0;
volatile int next_pressed = 0;
volatile int prev_pressed = 0;
volatile int last_button_state = 0xF;

// Tabla personalizada para displays de 7 segmentos
unsigned char hex_table_custom[10] = {
    0x40, // 0
    0x79, // 1
    0x24, // 2
    0x30, // 3
    0x19, // 4
    0x12, // 5
    0x02, // 6
    0x78, // 7
    0x80, // 8
    0x10  // 9
};

void button_interrupt_handler(void* context, alt_u32 id) {
    unsigned int button_state = IORD_ALTERA_AVALON_PIO_DATA(BUTTON_BASE);
    unsigned int button_changes = last_button_state & (~button_state);  // Flancos de bajada
    if (button_changes & 0x2) {
        next_pressed = 1;
        alt_putstr("Botón SIGUIENTE presionado\n");
    }
    if (button_changes & 0x4) {
        pause_pressed = 1;
        alt_putstr("Botón PLAY/PAUSE presionado\n");
    }
    if (button_changes & 0x8) {
        prev_pressed = 1;
        alt_putstr("Botón ANTERIOR presionado\n");
    }

    last_button_state = button_state;
}

void configurar_interrupciones() {
    alt_irq_register(BUTTON_IRQ, NULL, button_interrupt_handler);
    IOWR_ALTERA_AVALON_PIO_IRQ_MASK(BUTTON_BASE, 0xF);
}



int main() {
	volatile unsigned int * hex_display_ptr = (unsigned int *) HEX_DISPLAY_BASE;
	int minutes = 0;
	int seconds = 0;
    last_button_state = IORD_ALTERA_AVALON_PIO_DATA(BUTTON_BASE);
    configurar_interrupciones();

    while(1) {
    	int min_tens = minutes / 10;
    	int min_units = minutes % 10;
    	int sec_tens = seconds / 10;
    	int sec_units = seconds % 10;

    	unsigned int display_value =
    			(hex_table_custom[sec_units] & 0x7F) |           // HEX0
                ((hex_table_custom[sec_tens] & 0x7F) << 7) |     // HEX1
                ((hex_table_custom[min_units] & 0x7F) << 14) |   // HEX2
                ((hex_table_custom[min_tens] & 0x7F) << 21);     // HEX3

    	*hex_display_ptr = display_value;

    	usleep(1000000); //Pausa de 1s

        if (pause_pressed){
        	alt_putstr("== Pausado ==\n");
        	while (pause_pressed){
        		usleep(1000000); //Pausa de 1s
        		pause_pressed = 0;
        	}
        	alt_putstr("== Reanudado ==\n");
        }

        //Incrementar tiempo
        seconds++;
        if (seconds >= 60){
        	seconds = 0;
        	minutes++;
        }
        if (next_pressed) next_pressed = 0;
        if (prev_pressed) prev_pressed = 0;
        usleep(10000);
    }

    return 0;
}
