#include "sys/alt_stdio.h"
#include "sys/alt_irq.h"
#include "altera_avalon_pio_regs.h"
#include <unistd.h>

#define BUTTON_BASE 0x4820
#define BUTTON_IRQ 2  // IRQ ID para los botones (ajusta según tu configuración)

volatile int play_pause_pressed = 0;
volatile int next_pressed = 0;
volatile int prev_pressed = 0;
volatile int last_button_state = 0xF;

void button_interrupt_handler(void* context, alt_u32 id) {
    unsigned int button_state = IORD_ALTERA_AVALON_PIO_DATA(BUTTON_BASE);
    unsigned int button_changes = last_button_state & (~button_state);  // Flancos de bajada

    if (button_changes & 0x2) {
        next_pressed = 1;
        alt_putstr("Botón SIGUIENTE presionado\n");
    }

    if (button_changes & 0x4) {
        play_pause_pressed = 1;
        alt_putstr("Botón PLAY/PAUSE presionado\n");
    }

    if (button_changes & 0x8) {
        prev_pressed = 1;
        alt_putstr("Botón ANTERIOR presionado\n");
    }

    last_button_state = button_state;
}

void configurar_interrupciones() {
    alt_irq_register(BUTTON_IRQ, NULL, button_interrupt_handler);
    IOWR_ALTERA_AVALON_PIO_IRQ_MASK(BUTTON_BASE, 0xF);
}

int main() {
    last_button_state = IORD_ALTERA_AVALON_PIO_DATA(BUTTON_BASE);
    configurar_interrupciones();

    while(1) {
        if (play_pause_pressed) play_pause_pressed = 0;
        if (next_pressed) next_pressed = 0;
        if (prev_pressed) prev_pressed = 0;
        usleep(10000);
    }

    return 0;
}
